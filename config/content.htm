<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<p></p>
<h1>hw</h1>
<h2>w4-5</h2>
<p><span>• 老師要我們先在 </span><a href="http://exam.cycu.org/" target="_new">http://exam.cycu.org/</a><span> 上創建一個考試帳號。</span></p>
<p><span>• 老師要求我們先在Replit上建立一個專案，然後將其與GitHub.com連結。接著，使用Replit將GitHub上的專案 更新，並將更新後的內容推送到靜態網頁。</span></p>
<p><span>• 建立個人的資料庫，並在其中製作一個靜態網頁。</span></p>
<h2>w6-7</h2>
<p><span>• </span>利用上次存在隨身碟的網路設定繼續建立完成</p>
<p><span>• 進行九人一組安排固定座位, 由組長建立 cad2023_bg1 ~ cad2023_bg6, 並將 mdecycu 設為協同者.</span></p>
<p><span>• </span> <span>學員展示用 IPv6 位址:</span><span>2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb::班級名單序號</span></p>
<h2>w12</h2>
<p><a href="https://mde.tw/cadnote/downloads/2b_w12_seat.txt">2b_w12_seat.txt</a></p>
<p>Windows 網路查詢指令: ipconfig /all</p>
<p>DNS 伺服器查詢指令: nslookup</p>
<p>查詢至特定主機的路徑指令: tracert</p>
<h2>w13</h2>
<p>如何用 ChatGPT 協助座位排序的問題並且回覆問題</p>
<p>輸入問題一: <span>請利用 Python 讀取下列檔案名稱為 2b_w12_seat.txt "2b stud num seat 41123201 41123202 (3,8) 41123203 (3,7) 41123204 (6,8) ~~~ 中間資料沒有列出來 41136124 (3,2) 41136126 41136131 "</span></p>
<p>ChatGPT回覆一: <span>如果中間的資料沒有列出來，這可能是因為在逐行讀取時，只處理了特定格式的行，而未處理其他格式。</span><span>這個版本的程式碼會嘗試處理每一行，只要該行至少包含兩個資料項目（學號和座位號），就會將它們加入字典中。這樣，就可以處理包含座位號的行以及其他格式的行。以下的程式碼會嘗試更靈活地處理各種格式的行：</span></p>
<p><span><img alt="" height="381" src="https://zeng-wei-zhi.github.io/cad2023/images/@.png" width="330"/></span></p>
<p></p>
<p><span>輸入問題二: 假如前面程式中的座位號第一個 index 代表"列"而第二個 index 代表行, 請延續上個程式, 由左到右作為每一列的順序, 而且希望陣列排序是列出該位置上的學員學號。</span></p>
<p><span>ChatGPT回覆二: 如果你希望根據座位號的列和行來排序學號，可以稍微修改程式碼以處理這一需求。這個修改版的程式碼會將座位號的列和行轉換為整數，然後根據列和行的順序進行排序。最後，列印排序後的學號和座位號。以下是修改後的程式碼：</span></p>
<p><span><img alt="" height="414" src="https://zeng-wei-zhi.github.io/cad2023/images/%E5%9C%963.png" width="337"/></span></p>
<p><span></span></p>
<p><span>輸入問題三: 假如 "2b_w12_seat.txt" 可以從 "https://mde.tw/cadnote/downloads/2b_w12_seat.txt" 這個網址讀取, 而且希望將上一個 Python 程式改用 Brython 編寫, 要如何修改?</span></p>
<p><span>ChatGPT回覆三: Brython（Browser Python）是一個允許在瀏覽器中運行 Python 代碼的工具。要將之前的 Python 程式改用 Brython 編寫，首先確保你的瀏覽器支援 Brython。這個 HTML 文件包含了 Brython 的引入，並使用<span> </span><code>&lt;script type="text/python"&gt;</code><span><span> </span>塊嵌入了 Python 代碼。注意，由於使用 fetch 從網路中獲取檔案，因此需要考慮可能的跨域問題。在實際應用中，你可能需要處理跨域問題，例如使用CORS（跨來源資源共享）。此外，請確保在運行 Brython 之前已經載入了所需的 Brython 腳本。在這個例子中，我使用了 jsdelivr CDN 上的 Brython 腳本。為了避免這些問題，我們可以使用 JavaScript 來在瀏覽器中讀取檔案，然後將檔案內容傳遞給 Brython。然後可以使用以下的範例程式碼：</span></span></p>
<p><span><span>(因為我們不使用 ChatGPT 混用 Javascript 與 Brython 的建立, 所以此地不列出其回覆的原始碼)</span></span></p>
<p><span><span></span></span></p>
<p><span><span>輸入問題四: 假如我們已經知道 Brython 可以利用 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).read() 或 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).readlines() 讀取到檔案, 可以將上一個程式全部改用 Brython 完成嗎? </span></span></p>
<p><span><span>ChatGPT回覆四: 當使用 Brython 時，由於 JavaScript 的<span> </span><code>Array.sort()</code><span><span> </span>方法是就地排序，而 Python 的<span> </span></span><code>sorted()</code><span><span> </span>函數是返回一個新的已排序的列表，為了實現相同的排序行為，我們可以使用 Python 的<span> </span></span><code>sorted()</code><span><span> </span>函數並將結果轉換為 JavaScript 的陣列。</span>這個程式碼使用<span> </span><code>sorted()</code><span><span> </span>函數進行排序，然後透過<span> </span></span><code>map()</code><span><span> </span>方法將結果轉換為 JavaScript 的陣列。最後，使用 JavaScript 的迴圈來列印排序後的結果。</span></span></span></p>
<p><span><span><img alt="" height="529" src="https://zeng-wei-zhi.github.io/cad2023/images/%E5%9C%964.png" width="220"/></span></span></p>
<p><span><span>但因為以上修改後的程式碼行不通，完整程式碼<span> </span><a href="https://mde.tw/cadnote/content/Brython.html?src=https://gist.githubusercontent.com/zeng-wei-zhi/82afcff50f8b320867a01bff60168cf3/raw/915c5e270ee6313863c1c3e6feef8d48c16338a0/gistfile1.txt">w13_chatgpt_brython.py</a></span></span></p>
<h2><span><span>w14</span></span></h2>
<p><span><span>專案一, 讓鋼球直接在兩個三角形斜面上進行永動模擬</span></span></p>
<p><span><span>1.繪製草圖</span></span></p>
<p><span><span><img alt="" height="191" src="/images/草圖.png" width="374"/></span></span></p>
<p><span><span>2.擠出軌道</span></span></p>
<p><span><span><img alt="" height="192" src="/images/擠出.png" width="375"/></span></span></p>
<p><span><span>3.繪製斜面草圖</span></span></p>
<p><span><span><img alt="" height="192" src="/images/草圖2.png" width="375"/></span></span></p>
<p><span><span>4.切割斜面</span></span></p>
<p><span><span><img alt="" height="192" src="/images/切割.png" width="375"/></span></span></p>
<h2>w15</h2>
<div>1.W15 起將每週進行 exam.cycu.org 線上考試.</div>
<div>2.操作考試:</div>
<div>支撐塊</div>
<div><img alt="" height="200" src="/images/1.png" width="254"/></div>
<div></div>
<div><img alt="" height="171" src="/images/2.png" width="254"/></div>
<div></div>
<div><img alt="" height="190" src="/images/支撐塊.png" width="254"/></div>
<div></div>
<div>軌道</div>
<div></div>
<div><img alt="" height="160" src="/images/4.png" width="252"/></div>
<div></div>
<div><img alt="" height="170" src="/images/5.png" width="252"/></div>
<div></div>
<div><img alt="" height="158" src="/images/6.png" width="251"/></div>
<div></div>
<div><img alt="" height="160" src="/images/8.png" width="251"/></div>
<div></div>
<div><img alt="" height="151" src="/images/9.png" width="251"/></div>
<div></div>
<div><img alt="" height="165" src="/images/軌道.png" width="252"/></div>
<div></div>
<div>組合圖</div>
<div><img alt="" height="188" src="/images/組合圖.png" width="252"/></div>
<h2>Onshape</h2>
<p><img alt="" src="/images/index.html"/><img alt="" height="41" src="/images/R.png" width="74"/><br/><span>關於Onshape </span><strong>Solidworks創辦人於2012年創建Onshape產品，並於2019年10月23日由PTC以4.7億美元收購，這是PTC第一個SaaS產品，也是全球第一個全雲端的3D整合型軟體</strong><span>，更為分散式團隊提供適合的3D CAD系統軟體。<br/></span><br/><a href="/downloads/錄製_2023_11_08_22_59_14_601.mp4">/downloads/錄製_2023_11_08_22_59_14_601.mp4</a></p>
<p>底座<br/><img alt="" height="225" src="/images/螢幕擷取畫面 2023-11-20 220416.png" width="348"/><br/>桿件<br/><img alt="" height="348" src="/images/螢幕擷取畫面 2023-11-20 223228.png" width="140"/><br/>大U桿件<br/><img alt="" height="271" src="/images/螢幕擷取畫面 2023-11-20 223416.png" width="344"/></p>
<p>碗公</p>
<p><img alt="" height="239" src="/images/螢幕擷取畫面 2023-11-20 223456.png" width="340"/></p>
<p>組合圖</p>
<p><img alt="" height="310" src="/images/螢幕擷取畫面 2023-11-20 224235.png" width="340"/></p>
<h1>課程總結</h1>
<p><span>自評:60</span></p>
<p><span>A: 是否按照進度明確標示倉儲的改版歷程:是</span></p>
<p><span>B: 是否根據 IPv4 與 IPv6 網路環境設定進行作法討論:是(<a href="https://weng-wei-jun.github.io/cad2023/content/w6-7.html">連結</a>)</span></p>
<p><span>C: 是否就 Replit、s.cycu.org 與 localhost 情境下對個人與分組倉儲進行設定操作:目前只有一部份</span></p>
<p><span>D: 是否就所分配的 CAD 套件從安裝設定到繪圖提供內容參考:尚未上傳</span></p>
<p><span>E: 是否使用所分配的 CAD 套件完成專案一零組件繪圖, 並提供零組件下載:是(<a href="https://weng-wei-jun.github.io/cad2023/content/Onshape.html">Onshape</a>)</span></p>
<p><span>F: 是否將自行繪製的專案一零組件轉入 CoppeliaSim:尚未上傳網站</span></p>
<p><span>G: 是否利用 ZMQ Remote API Python 對專案一轉入的零組件設定感測器, 並進行鋼球永動模擬:尚未模擬</span></p>
<p><span>H: 是否實際操作 Triangle 軌道系統的鋼球永動模擬:尚未模擬</span></p>
<p><span>I: 是否完成 W15 的平面雙 U 迴路上的鋼球永動系統繪圖、轉檔與系統模擬:繪圖完成,尚未模擬</span></p>
<p><span>J: 是否使用所分配的 CAD 套件完成專案二 1D 平台零組件繪圖, 並提供零組件下載:進行中</span></p>
<p><span>K: 是否利用 ZMQ Remote API Python 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬:否</span></p>
<p><span>L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 PID 控制理論進行資料收集與 ChatGPT 對答:否</span></p>
<p><span>課程心得: 在這堂課中，我學到了許多有關繪圖軟體的新知識，包括一些我之前沒聽過的程式。儘管畫圖的步驟相似，但每種程式都有其獨特之處，需要額外熟悉。剩餘的時間裡，我會盡力完成未上傳的部分，特別是需要更多努力的程式模擬。希望能夠順利達成目標。</span></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>